import Resource, { AllResourcesObject } from "./Resource";

import { Store, StoreItem } from "./Store";
import { Factory } from "./Factory";
import { PacingManager } from "./PacingManager";
import { SaveManager } from "./SaveManager";
import "./Tab.js";
import UIManager from "./UIManager";
import "./styles";
import { Globals } from "./Globals";

const DEV = false;

class Energy extends Resource {
  constructor() {
    super({
      label: "energy",
      initialAmount: 0,
      capacity: 10,
      generateAmount: 1,
      costs: [],
      buildTimeMs: DEV ? 10 : 100,
      buildDescriptions: ["Generating Energy"],
      unitSymbol: { icon: "e", infront: false },
    });
  }
}

class Funds extends Resource {
  constructor() {
    super({
      label: "funds",
      initialAmount: 0,
      generateAmount: DEV ? 50 : 1,
      costs: [{ resource: "energy", amount: 4 }],
      buildTimeMs: DEV ? 1000 : 10 * 1000,
      buildDescriptions: ["Analyzing Market", "Executing Plan", "Generating Funds"],
      unitSymbol: { icon: "$", infront: true },
    });
  }
}

const energy = new Energy();
const funds = new Funds();

let resources: AllResourcesObject = { energy, funds };
Factory.ALL_RESOURCES = resources;

let fundsFactory = new Factory(funds, JSON.parse(JSON.stringify(funds.costs)), 0);
const pacingManager = new PacingManager(resources);

let store = new Store([
  {
    sortOrder: 1,
    id: "first-purchase",
    collection: "main",
    name: "OS Update",
    description: "Upgrades... Upgrades... Upgrades...",
    costs: [
      { resource: "funds", amount: 2.99 },
      { resource: "energy", amount: 10 },
    ],
    level: 1,
    dependsOn: [],
    onPurchase: (self: StoreItem) => {
      pacingManager.showWindow("system");
      pacingManager.showWindow("energy-upgrades");
      pacingManager.showWindow("funds-upgrades");
    },
  },
  {
    sortOrder: 2,
    id: "cosmic-blessing-enable",
    collection: "main",
    name: "Cosmic Blessing",
    description: "Amplifies resource yields in accordance with cosmic alignment (Up to a 35% surge).",
    costs: [
      { resource: "funds", amount: 1000 },
      { resource: "energy", amount: 250 },
    ],
    level: 1,
    dependsOn: [["main", "first-purchase", 0]],
    onPurchase: (self: StoreItem) => {
      Globals._maxCosmicBlessing = 0.35;
      pacingManager.showWindow("cosmic-stat");
    },
  },
  {
    sortOrder: 3,
    id: "queue-purchase",
    collection: "main",
    name: "Queues",
    description: `Enables you to schedule up to 2 builds.`,
    costs: [
      { resource: "funds", amount: 12 },
      { resource: "energy", amount: 18 },
    ],
    level: 1,
    dependsOn: [["main", "first-purchase", 0]],
    onPurchase: (self: StoreItem) => {
      self.level++;

      // Update buildCapacities for all resources
      Object.keys(resources).forEach((resourceKey) => {
        resources[resourceKey].buildQueueCapacity += 1;
      });

      self.purchased = false;

      self.costs = self.costs.map((cost) => {
        cost.amount = getChangeAmount(self.level, 1.75, cost.amount, true);
        return cost;
      });

      self.name = `Queues ${self.level}`;

      self.description = `Enables you to schedule up to ${resources["energy"].buildQueueCapacity + 1} builds.`;
    },
  },
  {
    sortOrder: 1,
    id: "funds-generation",
    collection: "funds",
    name: "Funds Generation",
    description: `Increases the amount of funds generated by 35%`,
    costs: [
      { resource: "funds", amount: 0.55 },
      { resource: "energy", amount: 2 },
    ],
    level: 1,
    dependsOn: [],
    onPurchase: (self: StoreItem) => {
      self.level++;

      let changeAmount = getChangeAmount(self.level, 0.35, funds.generateAmount, true);
      funds.generateAmount = changeAmount;

      self.purchased = false;

      self.costs = self.costs.map((cost) => {
        cost.amount = getChangeAmount(self.level, 0.65, cost.amount, true);
        return cost;
      });

      self.name = `Funds Generation ${self.level}`;
    },
  },
  {
    sortOrder: 3,
    id: "funds-factory",
    collection: "funds",
    name: "Funds Fabrication",
    description: "Generates Funds Passively",
    costs: [
      { resource: "funds", amount: 25 },
      { resource: "energy", amount: 95 },
    ],
    level: 1,
    dependsOn: [["funds", "funds-generation", 3]],
    onPurchase: (self: StoreItem) => {
      fundsFactory.level = 1;
      pacingManager.showWindow("funds-factory");
    },
  },
  {
    sortOrder: 1,
    id: "energy-generation",
    collection: "energy",
    name: "Energy Generation",
    description: `Increases the amount of energy generated by 10%`,
    costs: [
      { resource: "funds", amount: 0.5 },
      { resource: "energy", amount: 1 },
    ],
    level: 1,
    dependsOn: [],
    onPurchase: (self: StoreItem) => {
      self.level++;

      let changeAmount = getChangeAmount(self.level, 0.1, energy.generateAmount, true);
      energy.generateAmount = changeAmount;

      self.purchased = false;

      self.costs = self.costs.map((cost) => {
        cost.amount = getChangeAmount(self.level, 0.15, cost.amount, true);
        return cost;
      });

      self.name = `Energy Generation ${self.level}`;
    },
  },
  {
    sortOrder: 2,
    id: "energy-capacity",
    collection: "energy",
    name: "Energy Capacity",
    description: `Increase max capacity of energy to ${UIManager.formatValueWithSymbol(getChangeAmount(1, 1, energy.capacity, true), energy.unitSymbol)}`,
    costs: [
      { resource: "funds", amount: 5 },
      { resource: "energy", amount: 10 },
    ],
    level: 1,
    dependsOn: [],
    onPurchase: (self: StoreItem) => {
      self.level++;
      energy.capacity = getChangeAmount(self.level, 1, energy.capacity, true);

      self.purchased = false;

      self.costs = self.costs.map((cost) => {
        cost.amount = getChangeAmount(self.level, 1, cost.amount, true);
        return cost;
      });

      self.name = `Energy Capacity ${self.level}`;
      self.description = `Increase max capacity of energy to ${UIManager.formatValueWithSymbol(
        getChangeAmount(self.level, 1, energy.capacity, true),
        energy.unitSymbol
      )}`;
    },
  },
]);

// strength: 0-1 value: 1 will reduce by 50% at level 1.
// tension: controls the depth function goes to. tension of 1 will result in 0 change, while 0 will allow the strength to function without restriction.
function getChangeAmount(level: number, strength: number = 0.15, prevNumber: number, up: boolean = true) {
  if (level < 1) {
    throw new Error("Level cannot be 0");
  }

  return (prevNumber / Math.pow(up ? 1 + strength : 1 - strength, level - 1)) * Math.pow(up ? 1 + strength : 1 - strength, level);
}

new SaveManager(resources, pacingManager, store, { fundsFactory });

Globals.initCosmicBlessing(resources);

// DEV!!!! ---------------------------------------------------------------
let clickCount = 0;
let lastClickTime = 0;

document.getElementById("dev-hard-reset").addEventListener("click", function () {
  const currentTime = new Date().getTime();

  // Check if it's a triple click within 1 second
  if (currentTime - lastClickTime < 1000) {
    clickCount++;
    if (clickCount === 3) {
      localStorage.clear();

      // Reload the page
      location.reload();
    }
  } else {
    clickCount = 1;
  }

  lastClickTime = currentTime;
});

document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll('button[aria-label="Minimize"]').forEach((helpButton) => {
    helpButton.addEventListener("click", function () {
      // Get the target id from the data-target attribute
      var targetId = this.getAttribute("data-target");

      // Get the corresponding help text element
      var helpText = document.getElementById(targetId);

      // Toggle the visibility of the help text
      if (helpText) {
        helpText.style.display = helpText.style.display === "block" || helpText.style.display === "" ? "none" : "block";
      }
    });
  });
});
